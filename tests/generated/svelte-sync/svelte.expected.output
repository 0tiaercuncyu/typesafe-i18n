// This types were auto-generated. Any manual changes will be overwritten.
/* eslint-disable */

import { langauge } from 'langauge';
import { derived, Writable, writable } from 'svelte/store';
import type { LangaugeLocales, LangaugeTranslation, LangaugeTranslationArgs } from './langauge-types'
import { loadLocaleTranslations } from './langauge-util'

import { initFormatters } from './formatters'

const currentLocale = writable<LangaugeLocales>(null)

const isLoading = writable<boolean>(true)

export const init = (locale: LangaugeLocales = 'en') => setLocale(locale)

export const setLocale = (locale: LangaugeLocales) => {
	isLoading.set(true)
	currentLocale.set(locale)
}

export const selectedLocale = derived<Writable<LangaugeLocales>, LangaugeLocales>(currentLocale, (locale) => locale)

export const localeLoading = derived<Writable<boolean>, boolean>(isLoading, (loading) => loading)

export const LLL = derived<Writable<LangaugeLocales>, LangaugeTranslationArgs>(currentLocale, (locale: LangaugeLocales, set: (value: LangaugeTranslationArgs) => void) => {
	const setStoreValue = async () => {
		const langaugeTranslation: LangaugeTranslation = await loadLocaleTranslations(locale)
		const langaugeObject = langauge(locale, langaugeTranslation, initFormatters(locale))
		set(langaugeObject)
		isLoading.set(false)
	}

	setStoreValue()
}, new Proxy({} as LangaugeTranslationArgs, { get: () => () => '' }))

export default LLL
