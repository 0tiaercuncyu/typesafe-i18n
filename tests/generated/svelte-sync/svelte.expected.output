// This types were auto-generated. Any manual changes will be overwritten.
/* eslint-disable */

import { langaugeObjectWrapper } from 'langauge';
import type { Readable, Writable } from 'svelte/store';
import { derived, writable } from 'svelte/store';
import type { LangaugeLocale, LangaugeTranslation, LangaugeTranslationArgs, LangaugeTranslationKeys } from './svelte-sync/types.actual.output'
import { getTranslationFromLocale } from './svelte-sync/util.actual.output'
import { initFormatters } from './svelte-sync/formatters-template.actual.output'

const currentLocale = writable<LangaugeLocale>(null)

const isLoading = writable<boolean>(true)

let langaugeInstance = new Proxy({} as LangaugeTranslationArgs, { get: (_target, key: LangaugeTranslationKeys) => () => key as string })

const langaugeInstanceStore = writable<LangaugeTranslationArgs>(langaugeInstance)

export const init = (locale: LangaugeLocale = 'en') => setLocale(locale)

export const setLocale = (locale: LangaugeLocale) => {
	if (!locale) return

	isLoading.set(true)

	const langaugeTranslation: LangaugeTranslation = getTranslationFromLocale(locale)
	langaugeInstance = langaugeObjectWrapper(locale, langaugeTranslation, initFormatters(locale))
	langaugeInstanceStore.set(langaugeInstance)

	currentLocale.set(locale)

	isLoading.set(false)
}

export const selectedLocale = derived<Writable<LangaugeLocale>, LangaugeLocale>(currentLocale, (locale) => locale)

export const localeLoading = derived<Writable<boolean>, boolean>(isLoading, (loading: boolean, set: (value: boolean) => void) => set(loading))

export const LLL = new Proxy({} as Readable<LangaugeTranslationArgs> & LangaugeTranslationArgs, {
	get: (_target, key: LangaugeTranslationKeys & 'subscribe') => key === 'subscribe'
		? langaugeInstanceStore.subscribe
		: langaugeInstance[key]
})

export default LLL
