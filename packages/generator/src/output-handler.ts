import type { GeneratorConfigWithDefaultValues, OutputFormats } from './generate-files'
import { parseTypescriptVersion, TypescriptVersion } from './generator-util'

export const OVERRIDE_WARNING = "// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten."

type FileEnding = `.${string}`

let outputFormat: OutputFormats = 'TypeScript'
let tsVersion: TypescriptVersion = parseTypescriptVersion('4.3')

export const configureOutputHandler = (config: GeneratorConfigWithDefaultValues, version: TypescriptVersion): void => {
	outputFormat = config.outputFormat

	shouldGenerateJsDoc = outputFormat === 'JavaScript'
	fileEnding = shouldGenerateJsDoc ? '.js' : '.ts'
	fileEndingForTypesFile = shouldGenerateJsDoc ? '.d.ts' : '.ts'
	tsCheck = shouldGenerateJsDoc ? `
// @ts-check` : ''

	tsVersion = version
	supportsTemplateLiteralTypes = shouldGenerateJsDoc || (tsVersion.major === 4 && tsVersion.minor >= 1) || tsVersion.major >= 5
	supportsImportType = shouldGenerateJsDoc || (tsVersion.major === 3 && tsVersion.minor >= 8) || tsVersion.major >= 4

	importTypeStatement = `import${supportsImportType ? ' type' : ''}`

	importTypes = (from: string, ...types: string[]): string =>
		shouldGenerateJsDoc ? '' : `${importTypeStatement} { ${types.join(', ')} } from '${from}'`
	type = (type: string): string => shouldGenerateJsDoc ? '' : `: ${type}`
	typeCast = (type: string): string => shouldGenerateJsDoc ? '' : ` as ${type}`
	generics = (...generics: string[]): string => shouldGenerateJsDoc ? '' : `<${generics.join(', ')}>`
}

// --------------------------------------------------------------------------------------------------------------------

export let supportsTemplateLiteralTypes: boolean
export let supportsImportType: boolean
export let shouldGenerateJsDoc: boolean
export let fileEnding: FileEnding
export let fileEndingForTypesFile: FileEnding
export let tsCheck: string
export let importTypeStatement: string

// --------------------------------------------------------------------------------------------------------------------

export let importTypes: (from: string, ...types: string[]) => string

export let type: (type: string) => string

export let typeCast: (type: string) => string

export let generics: (...generic: string[]) => string
