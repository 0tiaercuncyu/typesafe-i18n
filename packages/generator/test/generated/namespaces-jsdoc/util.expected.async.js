// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
// @ts-check
/* eslint-disable */

/**
 * @typedef { import('./types.actual').Locales } Locales
 * @typedef { import('./types.actual').Namespaces } Namespaces
 * @typedef { import('./types.actual').Translations } Translations
 */

import { initFormatters } from './formatters-template.actual'

import { loadedFormatters, loadedLocales, locales } from './util.actual'

const localeTranslationLoaders = {
	en: () => import('./en'),
}

const localeNamespaceLoaders = {
	en: {
		test: () => import('./en/test')
	}
}

/**
 * @param { Locales } locale
 * @return { Translations }
 */
const getDictionary = (locale) =>
	loadedLocales[locale] || (loadedLocales[locale] = /** @type { Translations } */ ({}))

/**
 * @param { Locales } locale
 * @return { Promise<void> }
 */
export const loadLocaleAsync = async (locale) => {
	loadedLocales[locale] = {
		...getDictionary(locale),
		.../** @type { Translations } */ ((await localeTranslationLoaders[locale]()).default)
	}

	loadFormatters(locale)
}

export const loadAllLocalesAsync = () => Promise.all(locales.map(loadLocaleAsync))

/**
 * @param { Locales } locale
 * @return { void }
 */
export const loadFormatters = (locale) => {
	loadedFormatters[locale] = initFormatters(locale)
}

/**
 * @param { Locales } locale,
 * @param { Namespaces } namespace
 * @return { Promise<void> }
 */
export const loadNamespaceAsync = async (locale, namespace) => {
	const dictionary = getDictionary(locale)
	dictionary[namespace] = (await (localeNamespaceLoaders[locale][namespace])()).default
}
